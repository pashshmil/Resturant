{"ast":null,"code":"import { restaurantsActions } from \"./restaurants-slice\";\nimport { notificationActions } from \"./notification-slice\";\nexport const getRestaurantsData = () => {\n  return async dispatch => {\n    const fetchDats = async () => {\n      const response = await fetch('http://localhost:3005/restaurants');\n\n      if (!response.ok) {\n        throw new Error('not able to get data!!! ');\n      }\n\n      const data = await response.json(); //.then(data => console.log(\"data \",data))\n\n      return data;\n    };\n\n    try {\n      const restaurants = await fetchDats();\n      dispatch(restaurantsActions.getRestaurants(restaurants));\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: 'error',\n        title: 'error',\n        message: 'failed to get restaruant'\n      }));\n    }\n  };\n};\nexport const postRestaurantsData = _ref => {\n  let {\n    name: string\n  } = _ref;\n  return async dispatch => {\n    dispatch(notificationActions.showNotification({\n      status: 'pending',\n      title: 'adding',\n      message: 'addin new restaurant'\n    }));\n\n    const postData = async () => {\n      const response = await fetch('http://localhost:3005/restaurants/:id', {\n        method: 'POST',\n        body: JSON.stringify(restaurant)\n      });\n\n      if (!response.ok) {\n        throw new Error('not able to get data!!! ');\n      }\n    };\n\n    try {\n      await postData();\n      dispatch(notificationActions.showNotification({\n        status: 'success',\n        title: 'success',\n        message: 'success to add  new restaurant'\n      }));\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: 'error',\n        title: 'error',\n        message: 'failed to add restaruant'\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/pavelshmilevich/Documents/Dev/Restaurant/front/src/Epicure/store/restuarants.actions.ts"],"names":["restaurantsActions","notificationActions","getRestaurantsData","dispatch","fetchDats","response","fetch","ok","Error","data","json","restaurants","getRestaurants","error","showNotification","status","title","message","postRestaurantsData","name","string","postData","method","body","JSON","stringify","restaurant"],"mappings":"AACA,SAAQA,kBAAR,QAAiC,qBAAjC;AACA,SAAQC,mBAAR,QAAkC,sBAAlC;AACA,OAAO,MAAMC,kBAAkB,GAAC,MAAI;AAChC,SAAO,MAAOC,QAAP,IAAuB;AAC1B,UAAMC,SAAS,GAAE,YAAS;AACtB,YAAMC,QAAQ,GAAC,MAAMC,KAAK,CAAC,mCAAD,CAA1B;;AACA,UAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACH,YAAMC,IAAI,GAAC,MAAMJ,QAAQ,CAACK,IAAT,EAAjB,CALsB,CAKW;;AACjC,aAAOD,IAAP;AACH,KAPD;;AAQA,QAAG;AACC,YAAME,WAAW,GAAC,MAAMP,SAAS,EAAjC;AACAD,MAAAA,QAAQ,CAACH,kBAAkB,CAACY,cAAnB,CAAkCD,WAAlC,CAAD,CAAR;AACH,KAHD,CAGE,OAAME,KAAN,EAAY;AACVV,MAAAA,QAAQ,CAACF,mBAAmB,CAACa,gBAApB,CAAqC;AAC1CC,QAAAA,MAAM,EAAC,OADmC;AAE1CC,QAAAA,KAAK,EAAC,OAFoC;AAG1CC,QAAAA,OAAO,EAAE;AAHiC,OAArC,CAAD,CAAR;AAKH;AACJ,GAnBD;AAoBH,CArBM;AAuBP,OAAO,MAAMC,mBAAmB,GAAC,QAAiB;AAAA,MAAhB;AAACC,IAAAA,IAAI,EAACC;AAAN,GAAgB;AAC9C,SAAO,MAAOjB,QAAP,IAAuB;AAC1BA,IAAAA,QAAQ,CAACF,mBAAmB,CAACa,gBAApB,CAAqC;AACzCC,MAAAA,MAAM,EAAC,SADkC;AAEzCC,MAAAA,KAAK,EAAC,QAFmC;AAGzCC,MAAAA,OAAO,EAAE;AAHgC,KAArC,CAAD,CAAR;;AAKA,UAAMI,QAAQ,GAAE,YAAS;AACrB,YAAMhB,QAAQ,GAAE,MAAMC,KAAK,CAAC,uCAAD,EAAyC;AAChEgB,QAAAA,MAAM,EAAE,MADwD;AAEhEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,UAAf;AAF0D,OAAzC,CAA3B;;AAIE,UAAG,CAACrB,QAAQ,CAACE,EAAb,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACN,KARD;;AASA,QAAG;AACC,YAAMa,QAAQ,EAAd;AACAlB,MAAAA,QAAQ,CAACF,mBAAmB,CAACa,gBAApB,CAAqC;AAC1CC,QAAAA,MAAM,EAAC,SADmC;AAE1CC,QAAAA,KAAK,EAAC,SAFoC;AAG1CC,QAAAA,OAAO,EAAE;AAHiC,OAArC,CAAD,CAAR;AAKH,KAPD,CAOE,OAAMJ,KAAN,EAAY;AACVV,MAAAA,QAAQ,CAACF,mBAAmB,CAACa,gBAApB,CAAqC;AAC1CC,QAAAA,MAAM,EAAC,OADmC;AAE1CC,QAAAA,KAAK,EAAC,OAFoC;AAG1CC,QAAAA,OAAO,EAAE;AAHiC,OAArC,CAAD,CAAR;AAKH;AACJ,GA7BD;AA8BH,CA/BM","sourcesContent":["import Restaurant from \"../types/Restaurant\";\nimport {restaurantsActions} from \"./restaurants-slice\"\nimport {notificationActions} from \"./notification-slice\"\nexport const getRestaurantsData=()=>{\n    return async (dispatch:any) =>{\n        const fetchDats =async()=>{\n            const response=await fetch('http://localhost:3005/restaurants');\n            if(!response.ok){\n                throw new Error('not able to get data!!! '); \n              }\n            const data=await response.json();//.then(data => console.log(\"data \",data))\n            return data;\n        }\n        try{\n            const restaurants=await fetchDats();\n            dispatch(restaurantsActions.getRestaurants(restaurants));\n        } catch(error){\n            dispatch(notificationActions.showNotification({\n                status:'error',\n                title:'error',\n                message: 'failed to get restaruant',\n              }))\n        }\n    } \n}\n\nexport const postRestaurantsData=({name:string})=>{\n    return async (dispatch:any) =>{\n        dispatch(notificationActions.showNotification({\n             status:'pending',\n             title:'adding',\n             message: 'addin new restaurant',\n        }))\n        const postData =async()=>{\n            const response= await fetch('http://localhost:3005/restaurants/:id',{\n                method: 'POST',\n                body: JSON.stringify(restaurant),\n              });            \n              if(!response.ok){\n                throw new Error('not able to get data!!! '); \n              }\n        }\n        try{\n            await postData();\n            dispatch(notificationActions.showNotification({\n                status:'success',\n                title:'success',\n                message: 'success to add  new restaurant',\n           }))\n        } catch(error){\n            dispatch(notificationActions.showNotification({\n                status:'error',\n                title:'error',\n                message: 'failed to add restaruant',\n              }))\n        }\n    } \n}\n          \n        \n    \n"]},"metadata":{},"sourceType":"module"}